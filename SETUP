FSoC Setup and Features Walk-through
------------------------------------

Four Seasons of Code (FSoC) is a student project management system. I used 
Rails 2.3.5 while working on FSoC.

1. Getting FSoC on its feet
---------------------------

To run FSoC, the first steps would be as follows:
a. I am assuming you have a working Ruby-on-Rails setup.

b. Change your present working directory to the directory where fsoc is located.
$ cd /<fsocpath>/fsoc


c. To make sure you have all the gems installed, do rake gems:install
$ sudo rake gems:install


d. Now, to create the database, one needs to do rake db:migrate
$ rake db:migrate

e. FSoC allows customizations to be done. Some of the essential ones can be 
done by making changes in the app_settings.yml file. The settings are usually
 of the form:
<setting>: <value>

The settings are,
i) program_name
This is the name of the program for which FSoC is being used. It is used in 
important places like in the certificate of participation.
Example:
program_name: Some-Local-LUG Summer of Code
 
ii) admin_name
The name of the administrator of the program. Used in the certificate of 
participation.
Example:
admin_name: Akash Singh

iii) admin_designation
The formal designation of the administrator. Used in the certificate of 
participation.
Example:
admin_designation: Program Administrator

iv) fsoc_mode
It is one of the most important settings, and decides the mode in which FSoC is.
FSoC allows you to either choose the Summer Coding mode or the Year Round mode. 
In the summer coding mode, the administrator needs to set timeframes for each
event, which would not happen outside of those timeframes (make sure you follow
step 8 if you choose the Summer Coding mode). In the year round mode, there are
no set timeframes, and the control is in the hands of the mentors.
Example:
fsoc_mode: Year Round
fsoc_mode: Summer Coding

v) auth_via_script
FSoC lets you authenticate via an external account system. If the value of 
auth_via_script is set to true, FSoC uses the authenticated_externally? method
(in /<fsocpath>/fsoc/lib/external_account_system.rb file), which accepts a 
username and password pair and should return true if authenticated or false
otherwise. By default, the method verifies if the pair is a valid one in the
Fedora Account System (FAS). You need to put the code which verifies against
your account system in there.
Example:
fsoc_mode: true
fsoc_mode: false

vi) account_system
This is the name of the account system that will be used. Makes sense only if
auth_via_script is set to true.
Example:
account_system: Some-Local-LUGs-Account-System

vii) account_system_uri
This is nothing but the address of the account system's home page. It is needed
so that the user can be asked to register there first. Makes sense when
auth_via_script is set to true.
Example:
account_system_uri: http://www.some-local-lug.org/accounts

f. Now start the server. Make sure your present working directory is:
/<fsocpath>/fsoc. Then do:
$ ruby script/server

g. Run the following command to set up a cron job for automatic reminders if in
the development environment
$ whenever --update-crontab fsoc --set environment=development

or, the following in the production environment
$ whenever --update-crontab fsoc --set environment=production

h. In the environment.rb file, make changes on line numbers 53, 54, 57, 60, 61,
64 and 65 to make the appropriate email settings.

i. Open up http://localhost:3000
The FSoC page should come up.

j. Sign up as a user.
The admin should sign up before anyone else. 

i. Set up Timeframes
If FSoC is in Summer Coding mode, the timeframes need to be set as soon as
possible to appropriate values. To do this, login as an admin first. You will
see the admin dashboard. Click on the 'Configure' Tab below. 

The timeframes are self-explanatory. Choose dates as suitable, and click on 
'Set Timeframes'

k. Upload participation Certificate images
The participation certificate requires a logo image and a watermark image. To 
upload them, click on the 'Certificates' link. The page would
allow you to upload the images.


2. Dashboard
------------
The dashboard is a multi-purpose page for the users. For an administrator it is
a very important tool, he/she can see/do:
a) Projects proposed
b) Status of tasks of projects
c) Set timeframes
d) Upload images for use in Certificates

A mentor can see the projects being mentored by him/her apart from (a), (b) and
(c) as above. A student can use the dashboard for seeing the projects he/she
is a student of, projects that he/she has proposed and status of tasks for which
he/she is a student.

3. Projects
-----------
The projects section is used for creating/viewing/deleting projects. Since,
projects are the focus of this application, this section is critical.

a) Proposing a Project
Any user can propose a project, but this can be done only if FSoC is in either
Year Round mode or the current date falls within the project creation timeframe.

b) Adding Tasks
Tasks can be added to the project by the proposer, mentor or the admin, provided
FSoC is in Year Round mode or the current date falls within the project creation
timeframe.

c) Mentoring a Project
A user can become a mentor of the project at the time of creation of the project
by him/her, or volunteering to mentor if a project does not have a mentor yet.

d) Accepting a Proposal & Allocating Tasks
Mentors can accept proposals and allocate tasks to proposals if and when FSoC
is in Year Round mode or the current date falls within the project acceptance
timeframe.

An accepted student can make entries to the dedicated task journal which is like
a mini-blog, where entries can be made about the progress the student has made
with regards to the task.

e) Signing-Off tasks
A task initially is in the 'New' stage when allocated, is then 'Open'ed by the
student. When the task has been completed, the student is supposed to 'Resolve'
it. Links for 'Open'ing and 'Resolving' a task are available to the student
as and when appropriate. As the due-date approaches, reminders are sent to 
the student automatically. Later, if the task still remains unresolved even 
after the deadline has passed, reminders are sent to both the mentor as well 
as the student. 

A mentor can sign-off a task once it has been resolved, provided the work
done by the student meets the mentor's expectations

f) Signing-Off proposals & Certificates
Once all the tasks allocated to a proposal have been signed off by the mentor,
the mentor can sign-off the proposal. If FSoC is in Summer Coding mode,
the proposal would need a final sign-off from the admin. Once the project has
been signed-off, a student can download the participation certificate from
his/her dashboard


4. Users
--------
As the name suggests, one can use it for getting to know about the users 
which have registered onto the system.

5. Calendar
-----------
In Summer Coding mode, the Calendar is important as users can check out the
timeframes set by the administrator. The calendar is available to the user
in a graphical format, as well as in plain text where the important dates
and timeframes are listed in a simple manner. 



